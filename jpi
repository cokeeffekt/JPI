#!/usr/bin/php -q
<?php
/**
 * @author Patrik Hartwig
 * @copyright 2013
 * Version 2.0.4
 * nohup php /jpi/jpi < /dev/null > /dev/null 2>&1 &
 */
error_reporting(E_ERROR | E_WARNING | E_PARSE);

//contants
define(BR, "\n");

preRunCheck(false);
$jpiConfig;
switch($argv[1]) {
    case '-status':
		echo 'Status'.BR;
		if(file_exists('/etc/jpi/config.json')){
			$jpiConfig = json_decode(file_get_contents('/etc/jpi/config.json'), true);
			echo '       Pool Path : '.$jpiConfig['jpiPool'].BR;
			$c=0;
			foreach($jpiConfig['storePaths'] as $val) {
				echo '    Store Path '.$c++.' : '.$val.BR;
			}
		}
		if(strstr(`ps aux | grep '[j]pi startDaemon'`, 'startDaemon')) {
			echo '## JPI is Running ##'.BR;
			$status = poolScan();
			echo '       Links : '.$status['count_links'].BR;
			echo '   Non Links : '.$status['count_nonlinks'].BR;
			echo '     Missing : '.$status['count_missing'].BR;
		}else{
			echo '## JPI is NOT Running ##'.BR;
		}
		exit();
	break;

	case '-daemon':
		echo 'Starting JPI'.BR;
		sleep(1);
		if(strstr(`ps aux | grep '[j]pi startDaemon'`, 'startDaemon')) {
			echo 'JPI is already Running'.BR;
		}else{
			shell_exec("nohup php ".__FILE__." startDaemon < /dev/null > /dev/null 2>&1 &");
		}
		exit;
	break;
	case 'startDaemon':
		start_loop();
	break;

	case '-stop':
		if(strstr(`ps aux | grep '[j]pi startDaemon'`, 'startDaemon')) {
			shell_exec("kill $(ps aux | grep '[j]pi startDaemon' | awk '{print $2}')");
			echo 'Stopping JPI'.BR;
		}else{
			echo 'JPI not found'.BR;
		}
		exit;
	break;

	case '-find-missing':
		echo 'Locating Missing Source Files'.BR;
		findMissing();
	break;

	case '-restart':
		if(strstr(`ps aux | grep '[j]pi startDaemon'`, 'startDaemon')) {
			shell_exec("kill $(ps aux | grep '[j]pi startDaemon' | awk '{print $2}')");
			echo 'Stopping JPI'.BR;
		}else{
			echo 'JPI not found'.BR;
		}
		echo 'Starting JPI'.BR;
		sleep(1);
		if(strstr(`ps aux | grep '[j]pi startDaemon'`, 'startDaemon')) {
			echo 'JPI is Running'.BR;
		}else{
			shell_exec("nohup php ".__FILE__." startDaemon < /dev/null > /dev/null 2>&1 &");
		}
	break;
	case '-add-store-path':
		preRunCheck();

		fwrite(STDOUT, "Path to first storePath:");
	  	$firstStore = trim(fgets(STDIN));
	  	if(is_writable($firstStore)) {
	  		echo 'ok'.BR;
	  		$jpiConfig['storePaths'][] = rtrim($firstStore, '/');
	  	}else{
	  		echo $firstStore.'is not a valid Path'.BR;
	  		goto fs;
	  	}
	  	echo "Creating '/etc/jpi/config.json".BR;
	  	fwrite(fopen('/etc/jpi/config.json', 'w'), json_encode($jpiConfig));
	  	echo "storePath Added. Config file written.".BR;
	  	exit;

	break;
	default:
		echo '## JPI Manual ## by Patrik Hartwig'.BR;
		echo 'jpi -daemon    Start JPI as daemon'.BR;
		echo 'jpi -stop    Stop JPI'.BR;
		echo 'jpi -restart    Restart JPI as daemon'.BR;
		echo 'jpi -add-store-path [/path/to/new/store]    Adds store path to JPI (please back up /etc/jpi/config.json)'.BR;
		echo 'jpi -find-missing    attemps to locate missing source files';
}

function start_loop() {
	global $jpiConfig;
	preRunCheck();

	foreach($jpiConfig['storePaths'] as $value) {
		if(!is_dir($value)) exitLog("JPI Config 'storePaths' ".$value." is not a Directory");
	}
	$poolScan_old = array();

	while(1) {
		$poolScan = poolScan();
		if($poolScan_old['count_links'] != $poolScan['count_links']) {
			foreach($poolScan['links'] as $value) {
				jpiLog(checkLink($value));
			}
			checkDeleted();
		}

		if($poolScan['count_nonlinks']>0) {
			//echo "Found ".$poolScan['count_nonlinks'] .' unlinked files'.BR;
			foreach($poolScan['nonlinks'] as $value) {
				jpiLog(doMove($value));
			}
			//check links are ok
		}
		$poolScan_old = $poolScan;
		sleep(5);
	}
}

function preRunCheck($loop = true){
	global $jpiConfig;
	if(!is_dir('/etc/jpi')) {
		@mkdir('/etc/jpi');
	}
	if(file_exists('/etc/jpi/config.json')){
		$jpiConfig = json_decode(file_get_contents('/etc/jpi/config.json'), true);
	}else{
		(!$loop) ? setupJpi() : exitLog('No Config found in /etc/jpi/config.json');
	}

	if(!is_array($jpiConfig)) setupJpi();

	if(!is_writable($jpiConfig['jpiPool'])) exitLog("JPI Config 'jpiPool' ".$jpiConfig['jpiPool']." is not a Directory or JPI does not have write permissions.");
	foreach($jpiConfig['storePaths'] as $sP) {
		if(!is_writable($sP)) exitLog("JPI Config 'storePath' ".$sP." is not a Directory or JPI does not have write permissions.");
	}
}

function setupJpi(){
	fwrite(STDOUT, "## JPI Setup ##".BR);
	pp:
	fwrite(STDOUT, "Path to JPI Pool:");
  	$poolPath = trim(fgets(STDIN));
  	if(is_writable($poolPath)) {
  		echo 'ok'.BR;
  		$jpiConfig['jpiPool'] = rtrim($poolPath, '/');
  	}else{
  		echo $poolPath.'is not a valid Path'.BR;
  		goto pp;
  	}

  	fs:
  	fwrite(STDOUT, "First store Path, after config you can add more store Paths jpi -help".BR);

  	fwrite(STDOUT, "Path to first storePath:");
  	$firstStore = trim(fgets(STDIN));
  	if(is_writable($firstStore)) {
  		echo 'ok'.BR;
  		$jpiConfig['storePaths'][] = rtrim($firstStore, '/');
  	}else{
  		echo $firstStore.'is not a valid Path'.BR;
  		goto fs;
  	}
  	echo "Creating '/etc/jpi/config.json".BR;
  	fwrite(fopen('/etc/jpi/config.json', 'w'), json_encode($jpiConfig));
  	echo "Setup Complete. Config file written. 'jpi -help' to add another storePath".BR;
  	exit;
}

function jpiStoreLocation($sL = 0) {
	global $jpiConfig;
    foreach($jpiConfig['storePaths'] as $path) {
        $dF = disk_free_space($path);
        $aPath = ($dF > $sL) ? $path : $aPath;
        $sL = ($dF > $sL) ? $dF : $sL;
    }
    return $aPath;
}

function findMissing() {
	preRunCheck();
	global $jpiConfig;
	$poolScan = poolScan();
	$count++;
	$storePathScan = array();

	foreach($jpiConfig['storePaths'] as $value) {
		$storePathScan = array_merge($storePathScan, fileScan($value));
	}

	foreach ($poolScan['missing'] as $value) {
		$hash = file_get_contents($value);
		$oPath = str_replace('.JPImissingSource', '', $value);
		echo $oPath." => ";
		foreach($storePathScan as $sl) {
			if(strpos($sl, basename($hash))) {
				$match = dirname($sl).DIRECTORY_SEPARATOR.basename($hash);
				if(file_exists($match)){
					unlink($value);
					unlink($oPath);
					symlink($match, $oPath);
					fwrite(fopen($match.'.jpi', 'w'), $oPath);
					echo 'Link Fixed'.BR;
					$count++;
					break;
				}
			}
		}
		if(!$match) {
			echo BR;
		}
		unset($match);
	}
	echo '   '.$poolScan['count_missing'].' Missing Source Files'.BR;
	echo '   '.$count.' Links Fixed'.BR;
	$poolScan = poolScan();
	echo '   '.$poolScan['count_missing'].' Missing Source Files Remain'.BR;
}

function checkDeleted(){
	global $jpiConfig;
	foreach($jpiConfig[storePaths] as $value) {
		foreach(fileScan($value) as $jpiVal) {
			if((strstr(basename($jpiVal), "JPI"))&&(strstr(basename($jpiVal), ".jpi"))) {
				if(!file_exists(str_replace(".jpi", '', $jpiVal))) {
					unlink($jpiVal);
					continue;
				}
				$hashCheck = file_get_contents($jpiVal);
				if(!file_exists($hashCheck)) {
					jpiLog("Recycling Source files for '$hashCheck'");
					if(!is_dir(dirname($jpiVal).DIRECTORY_SEPARATOR.'recyle')) {
						mkdir(dirname($jpiVal).DIRECTORY_SEPARATOR.'recyle');
					}
					rename(str_replace(".jpi", '', $jpiVal), dirname($jpiVal).DIRECTORY_SEPARATOR.'recyle'.DIRECTORY_SEPARATOR.basename($hashCheck));
					unlink($jpiVal);
				}
			}
		}
	}
}

function checkLink($linkPath) {
	if(is_link($linkPath)) {
		$readLink = readlink($linkPath);
		if(file_exists($readLink)) {
			$hashCheck = file_get_contents($readLink.'.jpi');
			if($linkPath != $hashCheck) {
				fwrite(fopen($readLink.'.jpi', 'w'), $linkPath);
				return "Updated Link location '$linkPath'";
			}
		}else{
			if(!file_exists($linkPath.'.JPImissingSource')) {
				fwrite(fopen($linkPath.'.JPImissingSource', 'w'), $readLink);
				return "missing link source for '$linkPath', JPI will keep links, run 'jpi -find-missing'.";
			}
		}
	}
}

function doMove($filePath) {
	if(!is_link($filePath)&&(filesize($filePath)>1)) {
		$time = time();
		$fileStat = stat($filePath);
		if((($time-$fileStat[ctime]) > 30)&&(($time-$fileStat[mtime]) > 30)) {
			$to = jpiStoreLocation().DIRECTORY_SEPARATOR.'JPI'.md5($filePath).rand(10,99);
			if(!file_exists($to)) {
				copy($filePath, $to);
				if(filesize($filePath) == filesize($to)) {
					fwrite(fopen($to.'.jpi', 'w'), $filePath);
					unlink($filePath);
					symlink($to, $filePath);
					return "Stored $filePath => $to";
				}else{
					unlink($to);
					return "Size doesn't match, not stored. '$filePath'";
				}
			}else{
				// $to path exists check .jpi file to confirm
				$hashCheck = file_get_contents($to.'.jpi');
				if($hashCheck == $filePath) {
					unlink($to);
					unlink($to.'.jpi');
					doMove($filePath);
				}
			}
		}else{
			//skip waiting for access to file.
		}
	}
}

function poolScan() { // return pool stats
	global $jpiConfig;
	$files = fileScan($jpiConfig[jpiPool]);
	if(is_array($files)) {
		foreach($files as $value) {
			if(!strstr($value, ".JPImissingSource")) {
				if(is_link($value)) {
					$ret['links'][] = $value; // list of links
				}else{
					$ret['nonlinks'][] = $value; // list of non links
				}
			}else{
				$ret['missing'][] = $value;
			}
		}
	}
	$ret['count_missing'] = count($ret['missing']);
	$ret['all'] = $files; //all files found in jpiPool
	$ret['count'] = count($files); // all file count
	$ret['count_links'] = count($ret['links']); // link count
	$ret['count_nonlinks'] = count($ret['nonlinks']); // non link count
	return $ret;
}

function fileScan($dir) {
    $dir = rtrim($dir, '/');
    $contents = array();
    foreach(scandir($dir) as $node) {
        if ($node == '.')  continue;
        if ($node == '..') continue;
        if (is_dir($dir.DIRECTORY_SEPARATOR.$node)) {
            $contents = array_merge($contents, fileScan($dir.DIRECTORY_SEPARATOR.$node));
        } else {
            $contents[] = $dir.DIRECTORY_SEPARATOR.$node;
        }
    }
    return $contents;
}

function jpiLog($text) {
	if($text == "") return false;
	echo $text.BR;
	fwrite(fopen('/var/log/jpi.log', 'a'), date("Y-m-d H:i:s").' - '.$text.BR);
}

function exitLog($text) {
	echo $text.BR;
	fwrite(fopen('/var/log/jpi.log', 'a'), date("Y-m-d H:i:s").' - '.$text.BR);
	exit;
}

function bytesToSize1024($bytes, $precision = 2)
    {
        $unit = array('B','KB','MB','GB','TB','PB','EB');
        return @round(
            $bytes / pow(1024, ($i = floor(log($bytes, 1024)))), $precision
        ).$unit[$i];
    }

?>
